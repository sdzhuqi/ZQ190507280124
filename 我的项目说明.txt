Git：
初次使用需要设置用户名和邮箱
git config --global user.name
git config --global user.email

clone项目
用于把一个Github的项目clone到本地变为本地创库
git clone ssh地址

添加文件并提交
git status //用于查看文件状态
git add . //把当前目录下的新增和修改的文件添加到暂存区
//把暂存区的更新提交到本地库 -am 相当于 -a -m 
//-a 需要先add 才能commit 有了-a就一步完成
// -m 添加一个提交信息 引号为提交说明
git commit -am "add file" 
//推送本地库的改动到远程仓库
git push origin master

复杂使用
//本地创建仓库 空项目
git init
git add .
git commit -am "first add"
//本地仓库推送到远程库 远程库的地址起了个名字叫 origin并保存起来
git remote add origin 仓库的地址
git push origin master
//它会列出每个远程库的简短名字.
//在克隆完某个项目后,至少可以看到一个名为 origin 的远程库,.
//Git 默认使用这个名字来标识你所克隆的原始仓库 
//-v 详细信息
git remote -v
//删除名字
git remote remove origin
//修改名字对应的地址
git remote set-url origin 地址

dir 打开文件夹
cd  进入文件夹
Tab 自动补全
mkdir  创建文件夹
rm  删除

分支：
查看分支：git branch
创建分支：git branch （名字）
切换分支：git checkout（名字）
创建+切换：git checkout -b（名字）
合并某分支到当前分支：git merge（名字）
删除分支：git branch -d （名字）


git的介绍
Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git的读音为/git/。 Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 Torvalds 开始着手开发 Git 是为了作为一种过渡方案来替代 BitKeeper，后者之前一直是 Linux 内核开发人员在全球使用的主要源代码工具。开放源码社区中的有些人觉得 BitKeeper 的许可证并不适合开放源码社区的工作，因此 Torvalds 决定着手研究许可证更为灵活的版本控制系统。尽管最初 Git 的开发是为了辅助 Linux 内核开发的过程，但是我们已经发现在很多其他自由软件项目中也使用了 Git。例如 最近就迁移到 Git 上来了，很多 Freedesktop 的项目也迁移到了 Git 上。
